# LangChain 系列教程（一）：入门

## 介绍

**LangChain** 是一个用于开发由语言模型驱动的应用程序的框架。它使得应用程序能够：

- **具有上下文感知能力**：将语言模型连接到上下文来源（提示指令，少量的示例，需要回应的内容等）
- **具有推理能力**：依赖语言模型进行推理（根据提供的上下文如何回答，采取什么行动等）

这个框架由几个部分组成。

- **LangChain 库**：Python 和 JavaScript 库。包含了各种组件的接口和集成，一个基本的运行时，用于将这些组件组合成链和代理，以及现成的链和代理的实现。
- **LangChain 模板**：一系列易于部署的参考架构，用于各种任务。
- **LangServe**：一个用于将 LangChain 链部署为 REST API 的库。
- **LangSmith**：一个开发者平台，让你可以调试、测试、评估和监控基于任何 LLM 框架构建的链，并且与 LangChain 无缝集成。
  - ![](1.png)

## 核心模块

LangChain由6个module组成，分别是Model IO、Retrieval、Chains、Memory、Agents和Callbacks。

- **Model I/O**：AI应用的核心部分，其中包括输入、Model和输出。
- **Retrieval**：“检索“——该功能与向量数据密切库相关，是在向量数据库中搜索与问题相关的文档内容。
- **Memory**：为对话形式的模型存储历史对话记录，在长对话过程中随时将这些历史对话记录重新加载，以保证对话的准确度。
- **Chains**：虽然通过Model IO、Retrieval和Memory这三大模块可以初步完成应用搭建，但是若想实现一个强大且复杂的应用，还是需要将各模块组合起来，这时就可以利用Chains将其连接起来，从而丰富功能。
- **Agents**：它可以通过用户的输入，理解用户的意图，返回一个特定的动作类型和参数，从而自主调用相关的工具来满足用户的需求，将应用更加智能化。
- **Callbacks**: 回调机制可以调用链路追踪，记录日志，帮助开发者更好的调试LLM模型。

这6个module具体的关系如下图所示：

![](2.png)

## LangChain的六个模块介绍

该部分可以参考：https://mp.weixin.qq.com/s/C8pQGy-sv14MlYSQIOGPBA。写得比较详细。

## LangChain “HelloWorld”代码示例

参考[langchain_helloworld.ipynb](langchain_helloworld.html)